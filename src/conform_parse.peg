%% A configuration file may have zero-or-more lines.
config <- line* %{
    [ L || L <- Node, is_setting(L) ]
%};

%% Lines are actual settings, comments, or horizontal whitespace,
%% terminated by an end-of-line or end-of-file.
line <- ((setting / comment / ws+) (crlf / eof)) / crlf %{
    case Node of
        [ Line, _EOL ] -> Line;
        Line -> Line
    end
%};

%% A setting is a key and a value, joined by =, with surrounding
%% whitespace ignored.
setting <- ws* key ws* "=" ws* ((list_value / double_quote_value / kv_value / value) (", " / ",")?)+ ws* comment? %{
    [ _, Key, _, _Eq, _, Value, _, _ ] = Node,
    {Key, lists:map(fun([V, _]) -> V end, Value)}
%};

%% A key is a series of dot-separated identifiers.
key <- head:(word / double_quote_value) tail:("." (word / double_quote_value))* %{
    [{head, H}, {tail, T}] = Node,
    [unicode:characters_to_list(H)| [ unicode:characters_to_list(W) || [_, W] <- T]]
%};

%% A list of values surrounded by brackets, keys are always atoms
list_value <- (!((ws* crlf) / comment) "[" (((kv_value / (double_quote_value / value_in_list)) (", " / ",")?))+ "]") %{
    [_, _OpenBracket, Elems, _CloseBracket] = Node,
    lists:map(fun([Item, _]) -> Item end, Elems)
%};

%% A value surrounded by double quotes
double_quote_value <- (!((ws* crlf) / comment) '"' ('\\"' / (!'"' .))* '"') %{
    [_, _OpenQuote, Chars, _CloseQuote] = Node,
    case unicode:characters_to_list(Chars) of
      {_Status, _Begining, _Rest} ->
          {error, ?FMT("Error converting value on line #~p to utf8", [line(Idx)])};
      String ->
        unescape_double_quotes(String)
    end
%};

% A key/value pair
kv_value <- (!((ws* crlf) / comment) (kv_key ws* "=" ws* ((double_quote_value / value_in_list)))) %{
   [_, [Key, _, _Eq, _, Value]] = Node,
   {Key, Value}
%};

% A key for a kv_pair
kv_key <- (!(ws / crlf / "=") .)+ %{
    case unicode:characters_to_binary(Node, utf8, utf8) of
      {_Status, _Beginning, _Rest} ->
          {error, ?FMT("Error converting k/v key on line #~p to utf8", [line(Idx)])};
      Bin ->
          binary_to_list(Bin)
    end
%};

%% A value is any character, with trailing whitespace stripped.
value <- (!((ws* crlf) / comment) ("\\\\" / '\\,' / (!',' .)))+ %{
    case unicode:characters_to_binary(Node, utf8, utf8) of
        {_Status, _Begining, _Rest} ->
            {error, ?FMT("Error converting value on line #~p to utf8", [line(Idx)])};
        Bin ->
            binary_to_list(Bin)
    end
%};

%% A value is any character, except those which continue/close a list, with trailing whitespace stripped
value_in_list <- (!(ws / crlf / "," / "]") .)+ %{
    case unicode:characters_to_binary(Node) of
        {_Status, _Beginning, _Rest} ->
            {error, ?FMT("Error converting value on line #~p to utf8", [line(Idx)])};
        Bin ->
            binary_to_list(Bin)
    end
%};

%% A comment is any line that begins with a # sign, leading whitespace
%% allowed.
comment <- ws* "#" (!crlf .)* `comment`;

%% A word is one or more of letters, numbers and dashes or
%% underscores.
word <- ("\\." / [A-Za-z0-9_-])+ %{
    unescape_dots(unicode:characters_to_list(Node))
%};

%% An end-of-line is signified by a line-feed with an optional
%% preceding carriage-return.
crlf <- "\r"? "\n" `ws`;

%% The end-of-file is where no character matches.
eof <- !. `ws`;

%% Whitespace is either spaces or tabs.
ws <- [ \t] `ws`;

% Erlang code
%{
-define(line, true).
-define(FMT(F,A), lists:flatten(io_lib:format(F,A))).

%% @doc Only let through lines that are not comments or whitespace.
is_setting(ws) -> false;
is_setting(comment) -> false;
is_setting(_) -> true.

%% @doc Removes escaped dots from keys
unescape_dots([$\\,$.|Rest]) ->
    [$.|unescape_dots(Rest)];
unescape_dots([]) -> [];
unescape_dots([C|Rest]) ->
    [C|unescape_dots(Rest)].

unescape_double_quotes([$\\,$"|Rest]) ->
    [$"|unescape_double_quotes(Rest)];
unescape_double_quotes([]) -> [];
unescape_double_quotes([C|Rest]) ->
    [C|unescape_double_quotes(Rest)].
%}
